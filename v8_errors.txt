error: src/json11.cc: No such file or directory
error: src/json11.hpp: No such file or directory
error: src/taint_log_record.cc: No such file or directory
error: src/taint_log_record.h: No such file or directory
error: src/taint_tracking.cc: No such file or directory
error: src/taint_tracking/taint_tracking.cc: No such file or directory
error: src/taint_tracking/picosha2.h: No such file or directory

no such errors if use patch -p1 > patch_file

LookupSingleCharacterStringFromCode
MakeOrFindTwoCharacterString
里面都有taint tracking吧
只有直接返回result的地方是➕tainttracking的
而且区分不同的new string方法 


NewProperSubString+
NewExternalStringFromOneByte+
NewExternalStringFromTwoByte+
NewConsString+
MakeOrFindTwoCharacterString+
LookupSingleCharacterStringFromCode+


set_taint_node_label?



看还用不用DisallowHeapAllocation
不然就改成
DisallowGarbageCollection no_gc
都有

what is RuntimeEnterSymbolicStackFrame/RuntimeExitSymbolicStackFrame


class Object : public TaggedImpl<HeapObjectReferenceType::STRONG, Address> {


class V8_EXPORT ObjectTemplate : public Template { 
  ...
}
class V8_EXPORT FunctionTemplate : public Template {
}

class V8_EXPORT Template : public Data {
  ...
}
class V8_EXPORT Data {
 private:                                                                       
  Data();                                                                       
};

Name is a superclass for Symbol and String which can be both be used as names for a property.

class Object {}

// Smi represents integer Numbers that can be stored in 31 bits.
// Smis are immediate which means they are NOT allocated in the heap.
// The this pointer has the following format: [31 bit signed int] 0
// For long smis it has the following format:
//     [32 bit signed int] [31 bits zero padding] 0
// Smi stands for small integer.
class Smi: public Object {}

class AstNode: public ZoneObject {

// ZoneObject is an abstraction that helps define classes of objects
// allocated in the Zone. Use it as a base class; see ast.h.
class ZoneObject {



error:
ld.lld: error: undefined symbol: tainttracking::webkit::StringTaint::InitTaintData(WTF::StringImpl*)
reason: 
file not spicified in BUILD.gn


what is tainttracking::FlattenTaintData?

uri
EscapePrivate



The Zone is used to hold temporary data structures like
// the abstract syntax tree, which is deallocated after compilation.


../../v8/src/taint_tracking.h:287:19: error: no type named 'JSRegExp' in namespace 'v8::internal'
#include "src/objects/js-regexp.h"
#include "src/objects/js-array-buffer.h"
in v8/src/taint_tracking.h


  // A taint type stores a single byte of taint information about a single
  // character of string data. The most significant three bits are used for the
  // encoding and the last significant 5 bits are used for the taint type.
  //
  // 0 0 0      0 0 0 0 0
  // \___/      \_______/
  //   |            |
  // encoding    taint type


  ../../v8/src/taint_tracking/ast_serialization.cc:148:10: error: no viable conversion from 'Handle<v8::internal::Oddball>' to 'v8::internal::Object'

  ../../v8/src/taint_tracking/ast_serialization.cc:148:18: error: no viable conversion from 'Handle<v8::internal::Oddball>' to 'Handle<v8::internal::Object>'

  ../../v8/src/taint_tracking/ast_serialization.cc:225:16: error: no viable conversion from 'Handle<v8::internal::Handle<v8::internal::Oddball>>' to 'Handle<v8::internal::Object>'

  Handle<Object> undefined_value = Handle<Object>::cast(isolate_->factory()->undefined_value());



// Most object types in the V8 JavaScript are described in this file.
//
// Inheritance hierarchy:
// - Object
//   - Smi          (immediate small integer)
//   - TaggedIndex  (properly sign-extended immediate small integer)
//   - HeapObject   (superclass for everything allocated in the heap)
//     - JSReceiver  (suitable for property access)
//       - JSObject
//         - JSArray
//         - JSArrayBuffer
//         - JSArrayBufferView
//           - JSTypedArray
//           - JSDataView
//         - JSCollection
//           - JSSet
//           - JSMap
//         - JSCustomElementsObject (may have elements despite empty FixedArray)
//           - JSSpecialObject (requires custom property lookup handling)
//             - JSGlobalObject
//             - JSGlobalProxy
//             - JSModuleNamespace
//           - JSPrimitiveWrapper
//         - JSDate
//         - JSFunctionOrBoundFunction
//           - JSBoundFunction
//           - JSFunction
//         - JSGeneratorObject
//         - JSMapIterator
//         - JSMessageObject
//         - JSRegExp
//         - JSSetIterator
//         - JSStringIterator
//         - JSWeakCollection
//           - JSWeakMap
//           - JSWeakSet
//         - JSCollator            // If V8_INTL_SUPPORT enabled.
//         - JSDateTimeFormat      // If V8_INTL_SUPPORT enabled.
//         - JSDisplayNames        // If V8_INTL_SUPPORT enabled.
//         - JSListFormat          // If V8_INTL_SUPPORT enabled.
//         - JSLocale              // If V8_INTL_SUPPORT enabled.
//         - JSNumberFormat        // If V8_INTL_SUPPORT enabled.
//         - JSPluralRules         // If V8_INTL_SUPPORT enabled.
//         - JSRelativeTimeFormat  // If V8_INTL_SUPPORT enabled.
//         - JSSegmenter           // If V8_INTL_SUPPORT enabled.
//         - JSSegments            // If V8_INTL_SUPPORT enabled.
//         - JSSegmentIterator     // If V8_INTL_SUPPORT enabled.
//         - JSV8BreakIterator     // If V8_INTL_SUPPORT enabled.
//         - WasmExceptionObject
//         - WasmGlobalObject
//         - WasmInstanceObject
//         - WasmMemoryObject
//         - WasmModuleObject
//         - WasmTableObject
//       - JSProxy
//     - FixedArrayBase
//       - ByteArray
//       - BytecodeArray
//       - FixedArray
//         - HashTable
//           - Dictionary
//           - StringTable
//           - StringSet
//           - CompilationCacheTable
//           - MapCache
//         - OrderedHashTable
//           - OrderedHashSet
//           - OrderedHashMap
//         - FeedbackMetadata
//         - TemplateList
//         - TransitionArray
//         - ScopeInfo
//         - SourceTextModuleInfo
//         - ScriptContextTable
//         - ClosureFeedbackCellArray
//       - FixedDoubleArray
//     - PrimitiveHeapObject
//       - BigInt
//       - HeapNumber
//       - Name
//         - String
//           - SeqString
//             - SeqOneByteString
//             - SeqTwoByteString
//           - SlicedString
//           - ConsString
//           - ThinString
//           - ExternalString
//             - ExternalOneByteString
//             - ExternalTwoByteString
//           - InternalizedString
//             - SeqInternalizedString
//               - SeqOneByteInternalizedString
//               - SeqTwoByteInternalizedString
//             - ConsInternalizedString
//             - ExternalInternalizedString
//               - ExternalOneByteInternalizedString
//               - ExternalTwoByteInternalizedString
//         - Symbol
//       - Oddball
//     - Context
//       - NativeContext
//     - Cell
//     - DescriptorArray
//     - PropertyCell
//     - PropertyArray
//     - Code
//     - AbstractCode, a wrapper around Code or BytecodeArray
//     - Map
//     - Foreign
//     - SmallOrderedHashTable
//       - SmallOrderedHashMap
//       - SmallOrderedHashSet
//     - SharedFunctionInfo
//     - Struct
//       - AccessorInfo
//       - AsmWasmData
//       - PromiseReaction
//       - PromiseCapability
//       - AccessorPair
//       - AccessCheckInfo
//       - InterceptorInfo
//       - CallHandlerInfo
//       - EnumCache
//       - TemplateInfo
//         - FunctionTemplateInfo
//         - ObjectTemplateInfo
//       - Script
//       - DebugInfo
//       - BreakPoint
//       - BreakPointInfo
//       - CachedTemplateObject
//       - StackFrameInfo
//       - CodeCache
//       - PropertyDescriptorObject
//       - PrototypeInfo
//       - Microtask
//         - CallbackTask
//         - CallableTask
//         - PromiseReactionJobTask
//           - PromiseFulfillReactionJobTask
//           - PromiseRejectReactionJobTask
//         - PromiseResolveThenableJobTask
//       - Module
//         - SourceTextModule
//         - SyntheticModule
//       - SourceTextModuleInfoEntry
//     - FeedbackCell
//     - FeedbackVector
//     - PreparseData
//     - UncompiledData
//       - UncompiledDataWithoutPreparseData
//       - UncompiledDataWithPreparseData
//     - SwissNameDictionary
//
// Formats of Object::ptr_:
//  Smi:        [31 bit signed int] 0
//  HeapObject: [32 bit direct pointer] (4 byte aligned) | 01


Local<Context>
context->GetIsolate()

Handle<AllocationSite>
GetIsolate()


../../v8/src/taint_tracking/object_versioner.cc:270:27: error: no member named 'GetIsolate' in 'v8::internal::ArrayList'
NEVER_READ_ONLY_SPACE_IMPL(ArrayList)


v8::Isolate* Message::GetIsolate() const {
  i::Isolate* isolate = Utils::OpenHandle(this)->GetIsolate();
  return reinterpret_cast<Isolate*>(isolate);
}



../../v8/src/taint_tracking/ast_serialization.cc:227:16: error: no viable conversion from 'Handle<v8::internal::Oddball>' to 'Handle<v8::internal::Object>'

../../v8/src/api/api.cc:5666:60: error: no member named 'GetIsolate' in 'v8::internal::String'

add 
v8::Isolate* String::GetIsolate() const {
  i::Isolate* isolate = Utils::OpenHandle(this)->GetIsolate();
  return reinterpret_cast<Isolate*>(isolate);
}
in api.cc

no Getisolate in String
NEVER_READ_ONLY_SPACE_IMPL(String)


../../v8/src/taint_tracking/ast_serialization.cc:150:18: error: no viable conversion from 'Handle<v8::internal::Oddball>' to 'Handle<v8::internal::Object>'

../../v8/src/taint_tracking/ast_serialization.cc:165:12: error: member access into incomplete type 'v8::internal::LookupIterator'

add 
#include "src/objects/lookup.h"
#include "v8/src/roots/roots.h"
in v8/src/taint_tracking.h



../../v8/src/objects/lookup.h:119:39: error: member access into incomplete type 'v8::internal::Isolate'
  Heap* heap() const { return isolate_->heap(); }
                                      ^
../../v8/include/v8-internal.h:24:7: note: forward declaration of 'v8::internal::Isolate'
class Isolate;

move #include "src/objects/lookup.h"
to v8/src/taint_tracking/ast_serialization.h


../../v8/src/taint_tracking/symbolic_state.cc:267:55: error: member reference type 'v8::internal::Map' is not a pointer; did you mean to use '.'?
typeinfo << Handle<HeapObject>::cast(value)->map()->instance_type();
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
                                                  .





../../v8/src/taint_tracking/object_versioner.cc:442:18: error: no viable conversion from 'Handle<v8::internal::HeapNumber>' to 'Handle<v8::internal::HeapObject>'
                 isolate_->factory()->NewHeapNumber(tag.GetUniqueId()));
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

add #include "src/objects/heap-number.h"
in taint_tracking.h


add #include "src/heap/factory-inl.h"
in ../../v8/src/taint_tracking/ast_serialization.h

../../v8/src/strings/uri.cc:185:29: error: no matching function for call to 'GetTaintStatus'
      taint_data->push_back(tainttracking::GetTaintStatus(*uri, k));
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../../v8/src/taint_tracking.h:269:30: note: candidate template ignored: could not match 'T *' against 'v8::internal::String'


      taint_data->push_back(tainttracking::GetTaintStatus(uri, k));

change the def in taint_tracking.cc


../../v8/src/taint_tracking/ast_serialization.cc:957:28: error: implicit conversion loses integer precision: 'std::vector<std::unique_ptr<tainttracking::SymbolicStackFrame>>::size_type' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') [-Werror,-Wshorten-64-to-32]
  return executing_frames_.size();
  ~~~~~~ ~~~~~~~~~~~~~~~~~~^~~~~~

../../v8/src/taint_tracking/ast_serialization.cc:681:16: error: implicit conversion loses integer precision: 'std::vector<tainttracking::SymbolicMemorySlot>::size_type' (aka 'unsigned long') to 'uint32_t' (aka 'unsigned int') [-Werror,-Wshorten-64-to-32]
  return args_.size();
  ~~~~~~ ~~~~~~^~~~~~

change to 
size_t SymbolicStackFrame::NumArgs() const {
  return args_.size();
}



error: declaration requires an exit-time destructor [-Werror,-Wexit-time-destructors]
std::unique_ptr<LogListener> global_log_listener;

solution: 
std::unique_ptr<LogListener>& getGlobalLogListener() {
    static std::unique_ptr<LogListener> global_log_listener(new LogListener);
    return global_log_listener;
}

std::unique_ptr<LogListener>& global_log_listener = getGlobalLogListener();


An Isolate is an independant copy of the V8 runtime which includes its own heap. Two different Isolates can run in parallel and can be seen as entirely different sandboxed instances of a V8 runtime.


why do we need isolate in taint_tracker?


V8NodeLabelSerializer
has one variable: isolate_
need isolate to generate rawString
get isolate by Isolate::Current()
not sure


GenerateTaintTrackingHook
need an ASTnode to do the hook, that's why we need a proxy

v8 or v8::internal???


../../v8/src/taint_tracking/taint_tracking.cc:81:30: error: declaration requires an exit-time destructor [-Werror,-Wexit-time-destructors]


../../v8/src/taint_tracking/taint_tracking.cc:193:7: error: use of undeclared identifier 'FLAG_taint_tracking_write_packed_logs'

